<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:spring.aop="http://www.springframework.org/schema/spring.aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
       http://www.springframework.org/schema/util
       http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/spring.aop http://www.springframework.org/schema/spring.aop/spring-spring.aop.xsd">

    <!-- Enable annotated -->
    <!--<context:annotation-config/>-->
    <!-- Auto discovery - use without annotation-config above -->
    <context:component-scan base-package="beans.xml"/>

    <!-- Beans -->
    <bean id="duke" class="beans.xml.jugglers.Juggler">
        <constructor-arg value="3"/>
    </bean>
    <bean id="sonet20" class="beans.xml.Sonet29"/>
    <bean id="stage" class="beans.xml.Stage"
          factory-method="getInstance"/>
    <bean id="kenny" class="beans.xml.instruments.Instrumentalist">
        <property name="song" value="Some song"/>
    </bean>
    <!-- each call provide new instance for bean by defining scope to provided -->
    <bean id="ticket" class="beans.xml.Ticket" scope="prototype"/>
    <!-- Init and destroy (called only on prototype) methods -->
    <bean id="hall" class="beans.xml.Hall"
          init-method="turnLightsOn"
          destroy-method="turnLightsOff"/>
    <!-- inner beans -->
    <bean id="playingJuggler" class="beans.xml.jugglers.PlayingJuggler">
        <constructor-arg>
            <bean class="beans.xml.instruments.Piano"/>
        </constructor-arg>
    </bean>
    <!-- injecting collection -->
    <bean id="piano" class="beans.xml.instruments.Piano"/>
    <bean id="guitar" class="beans.xml.instruments.Guitar"/>
    <bean id="unnamedBand" class="beans.xml.UnnamedBand">
        <property name="instruments">
            <set>
                <ref bean="piano"/>
                <ref bean="guitar"/>
            </set>
        </property>
    </bean>

    <!-- SpEL expression language -->
    <bean id="poeticDuke" class="beans.xml.jugglers.PoeticJuggler" p:age="19">
        <constructor-arg value="#{T(java.lang.Math).random() * 10}"/>
        <!--<constructor-arg ref="sonet20"/>-->
        <constructor-arg value="#{sonet20}"/>
    </bean>
    <!-- ? means check item on the left for non null value -->
    <util:properties id="settings" location="classpath:settings.properties"/>
    <bean id="#{settings['some.name']}" class="beans.xml.instruments.Instrumentalist"
          p:song="#{kenny.song?.toUpperCase()}"/>
    <util:list id="cities">
        <bean class="beans.xml.spel.City"
              p:name="Chicago" p:state="IL" p:population="2853114"/>
        <bean class="beans.xml.spel.City"
              p:name="Atlanta" p:state="GA" p:population="537958"/>
        <bean class="beans.xml.spel.City"
              p:name="Dallas" p:state="TX" p:population="1279910"/>
        <bean class="beans.xml.spel.City"
              p:name="Houston" p:state="TX" p:population="2242193"/>
        <bean class="beans.xml.spel.City"
              p:name="Odessa" p:state="TX" p:population="90943"/>
        <bean class="beans.xml.spel.City"
              p:name="El Paso" p:state="TX" p:population="613190"/>
        <bean class="beans.xml.spel.City"
              p:name="Jal" p:state="NM" p:population="1996"/>
        <bean class="beans.xml.spel.City"
              p:name="Las Cruces" p:state="NM" p:population="91865"/>
    </util:list>
    <!-- names = new collection containing only names of the cities -->
    <bean id="cityHolder" class="beans.xml.spel.CityHolder"
        p:city="#{cities[2]}" p:cities="#{cities.?[population gt 10000]}"
        p:names="#{cities.?[population gt 10000].![name + ', ' + state]}"/>
    <!-- Select last city matching criteria -->
    <bean id="cityHolder1" class="beans.xml.spel.CityHolder"
          p:city="#{cities[3]}" p:cities="#{cities.$[population gt 10000]}"/>


    <!-- Autowiring -->
    <bean id="kenny2" class="beans.xml.instruments.Instrumentalist"
        p:song="Jingle Bels" autowire="byName"/>
    <bean id="guitar2" class="beans.xml.instruments.Guitar"/>
    <bean id="saxophone" class="beans.xml.instruments.Saxophone"/>

    <!-- AOP -->
    <bean id="audience" class="beans.xml.AudienceAOP"/>
    <spring.aop:config>
       <spring.aop:aspect ref="audience">
           <spring.aop:pointcut id="performance" expression="execution(* beans.api.Performer.perform(..))"/>
           <spring.aop:before pointcut-ref="performance" method="takeSeats"/>
           <spring.aop:before pointcut-ref="performance" method="turnOffCellPhones"/>
           <spring.aop:after-returning pointcut-ref="performance" method="applaud"/>
           <spring.aop:after-throwing pointcut-ref="performance" method="demandRefund"/>
       </spring.aop:aspect>
    </spring.aop:config>
    <bean id="audienceAnnotated" class="beans.annotated.AudienceAOP"/>
    <spring.aop:config>
        <spring.aop:aspect ref="audienceAnnotated">
            <spring.aop:pointcut id="performance" expression="execution(* beans.api.Performer.perform(..))"/>
            <spring.aop:around method="performanceAdvice" pointcut-ref="performance"/>
        </spring.aop:aspect>
    </spring.aop:config>
</beans>